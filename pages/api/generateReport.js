// pages/api/generateReport.js
import fs from 'fs';
import path from 'path';
import PDFDocument from 'pdfkit';

export default async function handler(req, res) {
  if (req.method !== 'POST') {
    return res.status(405).json({ success: false, error: 'Method not allowed' });
  }

  try {
    const { type, range, data } = req.body;
    if (!data || !range || !type) {
      return res.status(400).json({ success: false, error: 'Missing required data: type, range, and data are required' });
    }

    const downloadsDir = path.join(process.cwd(), 'public', 'downloads');
    if (!fs.existsSync(downloadsDir)) fs.mkdirSync(downloadsDir, { recursive: true });

    if (type === 'pdf') return await generatePDFReport(res, { range, data });
    if (type === 'excel') return await generateExcelReport(res, { range, data });

    return res.status(400).json({ success: false, error: 'Invalid report type. Use "pdf" or "excel"' });
  } catch (error) {
    console.error('Report generation error:', error);
    return res.status(500).json({ success: false, error: 'Internal server error during report generation' });
  }
}

async function generatePDFReport(res, { range, data }) {
  const doc = new PDFDocument({ size: 'A4', margin: 50 });
  const fileName = `dashboard-report-${Date.now()}.pdf`;
  const filePath = path.join(process.cwd(), 'public', 'downloads', fileName);
  const stream = fs.createWriteStream(filePath);
  doc.pipe(stream);

  // Title & Metadata
  doc.font('Helvetica-Bold').fontSize(22).fillColor('#003366')
     .text('AI Call Agent Dashboard Report', { align: 'center' });
  doc.moveDown(0.2);
  doc.font('Helvetica').fontSize(10).fillColor('#555555')
     .text(`Generated: ${new Date().toLocaleString('en-US', { year:'numeric', month:'short', day:'numeric', hour:'2-digit', minute:'2-digit' })}`, { align: 'center' })
     .text(`Period: ${formatLabel(range)}`, { align: 'center' });
  doc.moveDown(1);

  // Key Metrics Table
  doc.font('Helvetica-Bold').fontSize(12).fillColor('#003366').text('Key Performance Metrics');
  doc.moveDown(0.5);

  const metrics = [
    ['Total Calls', data.totalCalls],
    ['Successful Calls', data.successfulCalls],
    ['Unsuccessful Calls', data.unsuccessfulCalls],
    ['Bookings Generated', data.bookingsGenerated],
    ['Success Rate', `${calcRate(data.successfulCalls, data.totalCalls)}%`],
    ['Booking Conversion', `${calcRate(data.bookingsGenerated, data.successfulCalls)}%`],
    ['Avg. Call Duration', data.avgCallDuration || 'N/A'],
    ['Avg. Rating', `${data.customerSatisfaction || 'N/A'}/5`]
  ];

  const tableTop = doc.y;
  metrics.forEach((row, i) => {
    const y = tableTop + i * 20;
    doc.font('Helvetica').fontSize(10).fillColor('#000000')
       .text(row[0], 50, y)
       .text(row[1], 250, y);
  });
  doc.moveDown(metrics.length * 0.2 + 1);

  // Credits Section
  doc.font('Helvetica-Bold').fontSize(12).fillColor('#003366').text('ElevenLabs Credits Summary');
  doc.moveDown(0.3);
  doc.font('Helvetica').fontSize(10).fillColor('#333333')
     .list([
       `Remaining: ${data.remainingCredits?.toLocaleString() || 0}`,
       `Used: ${data.usedCredits?.toLocaleString() || 0}`,
       `Total: ${data.totalCredits?.toLocaleString() || 0}`,
       `Usage: ${calcRate(data.usedCredits, data.totalCredits)}%`
     ], { bulletIndent: 20 });
  doc.moveDown(1);

  // Feedback Section
  doc.font('Helvetica-Bold').fontSize(12).fillColor('#003366').text('Recent Customer Feedback');
  doc.moveDown(0.3);
  (data.feedbacks || []).slice(0, 5).forEach((fb, idx) => {
    doc.font('Helvetica').fontSize(10).fillColor('#333333')
       .text(`${idx + 1}. ${fb}`, { indent: 15, lineGap: 2 });
  });
  doc.moveDown(1);

  // Insights
  doc.font('Helvetica-Bold').fontSize(12).fillColor('#003366').text('Insights & Recommendations');
  doc.moveDown(0.3);
  generateInsights(data).forEach(ins => {
    doc.font('Helvetica').fontSize(10).fillColor('#333333')
       .text(`• ${ins}`, { indent: 15, lineGap: 2 });
  });
  doc.moveDown(1);

  // Footer
  doc.font('Helvetica').fontSize(8).fillColor('#888888')
     .text('Generated by AI Call Agent Dashboard • Confidential', 50, 780, { align: 'center', width: 500 });

  doc.end();
  return new Promise(resolve => stream.on('finish', () => resolve(
    res.status(200).json({ success: true, downloadUrl: `/downloads/${fileName}` })
  )));
}

function calcRate(part, total) {
  return total > 0 ? ((part / total) * 100).toFixed(1) : '0.0';
}

function formatLabel(range) {
  const map = { today: 'Today', thisWeek: 'This Week', thisMonth: 'This Month', lastMonth: 'Last Month' };
  return map[range] || range;
}

function generateInsights(data) {
  const insights = [];
  const callRate = parseFloat(calcRate(data.successfulCalls, data.totalCalls));
  const bookRate = parseFloat(calcRate(data.bookingsGenerated, data.successfulCalls));

  if (callRate > 80) insights.push('Excellent call success; maintain performance.');
  else if (callRate > 60) insights.push('Good call success; consider script refinement.');
  else insights.push('Low call success; review failure cases and improve.');

  if (bookRate > 15) insights.push('High booking conversion; leverage upsell.');
  else if (bookRate > 8) insights.push('Moderate conversion; optimize booking flow.');
  else insights.push('Low conversion; simplify booking process.');

  if (data.customerSatisfaction >= 4.5) insights.push('High satisfaction; keep quality high.');
  else if (data.customerSatisfaction >= 3.5) insights.push('Average satisfaction; address key feedback.');
  else insights.push('Low satisfaction; analyze feedback for issues.');

  return insights;
}

async function generateExcelReport(res, { range, data }) {
  // Simple CSV fallback
  const lines = [
    ['Metric','Value'],
    ['Total Calls', data.totalCalls],
    ['Successful Calls', data.successfulCalls],
    ['Unsuccessful Calls', data.unsuccessfulCalls],
    ['Bookings Generated', data.bookingsGenerated],
    ['Success Rate', calcRate(data.successfulCalls, data.totalCalls) + '%'],
    ['Booking Conversion', calcRate(data.bookingsGenerated, data.successfulCalls) + '%'],
    ['Avg. Call Duration', data.avgCallDuration],
    ['Avg. Rating', data.customerSatisfaction + '/5']
  ];
  const csv = lines.map(r => r.join(',')).join('\n');
  const fileName = `dashboard-report-${Date.now()}.csv`;
  fs.writeFileSync(path.join(process.cwd(), 'public', 'downloads', fileName), csv);
  return res.status(200).json({ success: true, downloadUrl: `/downloads/${fileName}` });
}